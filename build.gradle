plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.commons:commons-lang3:3.0'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.data:spring-data-jpa:3.0.4'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.security:spring-security-core'
	implementation 'org.springframework.security:spring-security-web'
	implementation 'org.springframework.security:spring-security-config'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5';
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5';
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5';
}

task generateJavadoc(type: Javadoc) {
	sourceSets {
		main {
			java {
				srcDirs = ['src/main/java']
			}
		}
	}
	classpath += project.files(project.configurations.compileClasspath.findAll { it.exists() })
	destinationDir = file("$buildDir/docs/javadoc")
	options.addStringOption('Xdoclint:none', '-quiet')
	failOnError false
	options.encoding = 'UTF-8'
}


tasks.named('test') {
	useJUnitPlatform()
}
